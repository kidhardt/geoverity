---
/**
 * BasePageEs - Spanish Base Layout
 * Building-pages v2.0.0 compliant
 * WCAG 2.2 AA+ accessible
 * Register parity with BasePageEn
 */
import { t } from '@/i18n';
import '@/styles/global.css';
import '@/styles/layouts/base-page.css';

interface Props {
  title: string;
  description: string;
  canonical?: string;
  alternateEn?: string;
  translationStatus?: string;
  lastReviewed?: string;
  legalSensitivity?: boolean;
  disclaimer?: string;
}

const {
  title,
  description,
  canonical = "/es/",
  alternateEn = "/",
  translationStatus = "approved",
  lastReviewed = new Date().toISOString(),
  legalSensitivity = false,
  disclaimer = ""
} = Astro.props;

const lang = 'es';
---

<!DOCTYPE html>
<html lang={lang} dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- CLS Prevention: Inline critical CSS dimensions to prevent layout shift -->
    <style is:global>
      /* Critical layout styles loaded inline to prevent CLS */
      body { margin: 0; font-family: system-ui, sans-serif; }
      header[role="banner"] { min-height: 64px; }
      main[role="main"] { min-height: 60vh; }
      footer[role="contentinfo"] { min-height: 120px; }
      img { max-width: 100%; height: auto; display: block; }
      .hero, section.hero { min-height: 320px; }
      .content-section { min-height: 200px; }
    </style>

    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Preload layout CSS for faster parse -->
    <link rel="preload" href="/styles/layouts/base-page.css" as="style">

    <!-- Canonical and alternate links for SEO/i18n -->
    <link rel="canonical" href={canonical} />
    <link rel="alternate" href={alternateEn} hreflang="en" />
    <link rel="alternate" href={canonical} hreflang="es" />
    <link rel="alternate" href={alternateEn} hreflang="x-default" />

    <!-- Metadata for governance -->
    <script
      type="application/json"
      id="page-metadata"
      set:html={JSON.stringify({
        translationStatus,
        lastReviewed,
        legalSensitivity,
        disclaimer
      })}
    />
  </head>

  <body>
    <!-- Skip link - Building-pages requirement -->
    <a href="#main-content" class="skip-link">
      {t(lang, 'common.skipToMain')}
    </a>

    <!-- Header landmark -->
    <header role="banner">
      <div class="header-container">
        <!-- Logo/Brand -->
        <div class="header-brand">
          <a href="/es/" class="logo-link">
            GeoVerity
          </a>
        </div>

        <!-- Mobile menu toggle -->
        <button
          type="button"
          class="nav-toggle"
          aria-expanded="false"
          aria-controls="main-nav"
          aria-label={t(lang, 'common.menu')}
          id="nav-toggle"
        >
          <span class="nav-toggle-icon" aria-hidden="true"></span>
          <span class="nav-toggle-label">{t(lang, 'common.menu')}</span>
        </button>

        <!-- Primary navigation -->
        <nav
          id="main-nav"
          role="navigation"
          aria-labelledby="nav-toggle"
          class="main-nav"
        >
          <ul class="nav-list">
            <li><a href="/es/">{t(lang, 'nav.home')}</a></li>
            <li><a href="/es/servicios/">{t(lang, 'nav.services')}</a></li>
            <li><a href="/es/perspectivas/">{t(lang, 'nav.insights')}</a></li>
            <li><a href="/es/contacto/">{t(lang, 'nav.contact')}</a></li>
          </ul>

          <!-- Language switcher -->
          <div class="language-switcher">
            <span class="sr-only">{t(lang, 'languageSwitcher.label')}</span>
            <a
              href={alternateEn}
              hreflang="en"
            >
              {t(lang, 'languageSwitcher.english')}
            </a>
            <span aria-hidden="true">|</span>
            <a
              href={canonical}
              aria-current={lang === 'es' ? 'page' : undefined}
              hreflang="es"
            >
              {t(lang, 'languageSwitcher.spanish')}
            </a>
          </div>
        </nav>
      </div>
    </header>

    <!-- ARIA live region for nav state - polite announcements only -->
    <div aria-live="polite" aria-atomic="true" class="sr-only" id="nav-announcer"></div>

    <!-- Main content landmark -->
    <main id="main-content" role="main">
      <slot />
    </main>

    <!-- Footer landmark -->
    <footer role="contentinfo">
      <div class="footer-container">
        <p>{t(lang, 'footer.copyright')}</p>
      </div>
    </footer>

    <!-- Navigation toggle script - Progressive enhancement -->
    <script>
      // Mobile nav toggle with proper ARIA and focus management
      const navToggle = document.getElementById('nav-toggle');
      const mainNav = document.getElementById('main-nav');
      const navAnnouncer = document.getElementById('nav-announcer');
      const body = document.body;

      if (navToggle && mainNav) {
        // Track if we've announced nav open (announce only once per session)
        let hasAnnouncedOpen = false;

        navToggle.addEventListener('click', () => {
          const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
          const newState = !isExpanded;

          // Performance mark for INP measurement
          performance.mark('navToggleStart');

          // Update ARIA state
          navToggle.setAttribute('aria-expanded', String(newState));

          // Toggle nav visibility
          mainNav.classList.toggle('nav-open', newState);
          body.classList.toggle('nav-open', newState);

          // Announce state change (polite, meaningful changes only)
          if (navAnnouncer && newState && !hasAnnouncedOpen) {
            const messages = {
              en: 'Navigation menu opened',
              es: 'Menú de navegación abierto'
            };
            navAnnouncer.textContent = messages['es'];
            hasAnnouncedOpen = true;
          }

          // Focus management: move focus into nav on open
          if (newState) {
            const firstLink = mainNav.querySelector('a');
            firstLink?.focus();
          }

          // Performance measure for INP
          performance.mark('navToggleEnd');
          performance.measure('navToggleINP', 'navToggleStart', 'navToggleEnd');
        });

        // Keyboard: Escape closes nav
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && navToggle.getAttribute('aria-expanded') === 'true') {
            navToggle.click();
            navToggle.focus(); // Return focus to toggle button
          }
        });

        // Close nav when clicking outside (desktop)
        document.addEventListener('click', (e) => {
          if (
            navToggle.getAttribute('aria-expanded') === 'true' &&
            !mainNav.contains(e.target as Node) &&
            e.target !== navToggle &&
            !navToggle.contains(e.target as Node)
          ) {
            navToggle.click();
          }
        });
      }
    </script>
  </body>
</html>
