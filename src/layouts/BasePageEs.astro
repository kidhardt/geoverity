---
/**
 * BasePageEs - Spanish Base Layout
 * Building-pages v2.0.0 compliant
 * WCAG 2.2 AA+ accessible
 * Register parity with BasePageEn
 */
import { t } from '@/i18n';
import '@/styles/global.css';

interface Props {
  title: string;
  description: string;
  canonical?: string;
  alternateEn?: string;
  translationStatus?: string;
  lastReviewed?: string;
  legalSensitivity?: boolean;
  disclaimer?: string;
}

const {
  title,
  description,
  canonical = "/es/",
  alternateEn = "/",
  translationStatus = "approved",
  lastReviewed = new Date().toISOString(),
  legalSensitivity = false,
  disclaimer = ""
} = Astro.props;

const lang = 'es';
---

<!DOCTYPE html>
<html lang={lang} dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Canonical and alternate links for SEO/i18n -->
    <link rel="canonical" href={canonical} />
    <link rel="alternate" href={alternateEn} hreflang="en" />
    <link rel="alternate" href={canonical} hreflang="es" />
    <link rel="alternate" href={alternateEn} hreflang="x-default" />

    <!-- Metadata for governance -->
    <script
      type="application/json"
      id="page-metadata"
      set:html={JSON.stringify({
        translationStatus,
        lastReviewed,
        legalSensitivity,
        disclaimer
      })}
    />
  </head>

  <body>
    <!-- Skip link - Building-pages requirement -->
    <a href="#main-content" class="skip-link">
      {t(lang, 'common.skipToMain')}
    </a>

    <!-- Header landmark -->
    <header role="banner">
      <div class="header-container">
        <!-- Logo/Brand -->
        <div class="header-brand">
          <a href="/es/" class="logo-link">
            GeoVerity
          </a>
        </div>

        <!-- Mobile menu toggle -->
        <button
          type="button"
          class="nav-toggle"
          aria-expanded="false"
          aria-controls="main-nav"
          aria-label={t(lang, 'common.menu')}
          id="nav-toggle"
        >
          <span class="nav-toggle-icon" aria-hidden="true"></span>
          <span class="nav-toggle-label">{t(lang, 'common.menu')}</span>
        </button>

        <!-- Primary navigation -->
        <nav
          id="main-nav"
          role="navigation"
          aria-labelledby="nav-toggle"
          class="main-nav"
        >
          <ul class="nav-list">
            <li><a href="/es/">{t(lang, 'nav.home')}</a></li>
            <li><a href="/es/servicios/">{t(lang, 'nav.services')}</a></li>
            <li><a href="/es/perspectivas/">{t(lang, 'nav.insights')}</a></li>
            <li><a href="/es/contacto/">{t(lang, 'nav.contact')}</a></li>
          </ul>

          <!-- Language switcher -->
          <div class="language-switcher">
            <span class="sr-only">{t(lang, 'languageSwitcher.label')}</span>
            <a
              href={alternateEn}
              hreflang="en"
            >
              {t(lang, 'languageSwitcher.english')}
            </a>
            <span aria-hidden="true">|</span>
            <a
              href={canonical}
              aria-current={lang === 'es' ? 'page' : undefined}
              hreflang="es"
            >
              {t(lang, 'languageSwitcher.spanish')}
            </a>
          </div>
        </nav>
      </div>
    </header>

    <!-- ARIA live region for nav state - polite announcements only -->
    <div aria-live="polite" aria-atomic="true" class="sr-only" id="nav-announcer"></div>

    <!-- Main content landmark -->
    <main id="main-content" role="main">
      <slot />
    </main>

    <!-- Footer landmark -->
    <footer role="contentinfo">
      <div class="footer-container">
        <p>{t(lang, 'footer.copyright')}</p>
      </div>
    </footer>

    <!-- Navigation toggle script - Progressive enhancement -->
    <script>
      // Mobile nav toggle with proper ARIA and focus management
      const navToggle = document.getElementById('nav-toggle');
      const mainNav = document.getElementById('main-nav');
      const navAnnouncer = document.getElementById('nav-announcer');
      const body = document.body;

      if (navToggle && mainNav) {
        // Track if we've announced nav open (announce only once per session)
        let hasAnnouncedOpen = false;

        navToggle.addEventListener('click', () => {
          const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
          const newState = !isExpanded;

          // Performance mark for INP measurement
          performance.mark('navToggleStart');

          // Update ARIA state
          navToggle.setAttribute('aria-expanded', String(newState));

          // Toggle nav visibility
          mainNav.classList.toggle('nav-open', newState);
          body.classList.toggle('nav-open', newState);

          // Announce state change (polite, meaningful changes only)
          if (navAnnouncer && newState && !hasAnnouncedOpen) {
            const messages = {
              en: 'Navigation menu opened',
              es: 'Menú de navegación abierto'
            };
            navAnnouncer.textContent = messages['es'];
            hasAnnouncedOpen = true;
          }

          // Focus management: move focus into nav on open
          if (newState) {
            const firstLink = mainNav.querySelector('a');
            firstLink?.focus();
          }

          // Performance measure for INP
          performance.mark('navToggleEnd');
          performance.measure('navToggleINP', 'navToggleStart', 'navToggleEnd');
        });

        // Keyboard: Escape closes nav
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && navToggle.getAttribute('aria-expanded') === 'true') {
            navToggle.click();
            navToggle.focus(); // Return focus to toggle button
          }
        });

        // Close nav when clicking outside (desktop)
        document.addEventListener('click', (e) => {
          if (
            navToggle.getAttribute('aria-expanded') === 'true' &&
            !mainNav.contains(e.target as Node) &&
            e.target !== navToggle &&
            !navToggle.contains(e.target as Node)
          ) {
            navToggle.click();
          }
        });
      }
    </script>

    <style>
      /* Header styling - mobile-first */
      header[role="banner"] {
        position: sticky;
        top: 0;
        z-index: var(--z-header);
        background-color: var(--color-background);
        border-bottom: 1px solid #e0e0e0;
      }

      .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: var(--container-max-width);
        margin: 0 auto;
        padding: var(--space-md);
        min-height: var(--header-height);
      }

      .header-brand .logo-link {
        font-size: 1.5rem;
        font-weight: 700;
        text-decoration: none;
        color: var(--color-text);
      }

      /* Mobile nav toggle */
      .nav-toggle {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        background: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: var(--tap-target-padding);
        cursor: pointer;
        /* Tap target minimum enforced via global CSS */
      }

      .nav-toggle-icon {
        display: block;
        width: 24px;
        height: 2px;
        background-color: currentColor;
        position: relative;
      }

      .nav-toggle-icon::before,
      .nav-toggle-icon::after {
        content: '';
        position: absolute;
        width: 24px;
        height: 2px;
        background-color: currentColor;
        left: 0;
      }

      .nav-toggle-icon::before {
        top: -8px;
      }

      .nav-toggle-icon::after {
        top: 8px;
      }

      /* Navigation - mobile (drawer) */
      .main-nav {
        position: fixed;
        top: var(--header-height);
        right: 0;
        bottom: 0;
        width: 280px;
        max-width: 80vw;
        background-color: var(--color-background);
        box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        overflow-y: auto;
        padding: var(--space-lg);
      }

      /* Respect reduced motion */
      @media (prefers-reduced-motion: reduce) {
        .main-nav {
          transition: none;
        }
      }

      .main-nav.nav-open {
        transform: translateX(0);
      }

      .nav-list {
        list-style: none;
        margin: 0;
        padding: 0;
      }

      .nav-list li {
        margin-bottom: var(--space-sm);
      }

      .nav-list a {
        display: block;
        padding: var(--tap-target-padding);
        text-decoration: none;
        color: var(--color-text);
        border-radius: 4px;
        /* Tap target minimum enforced */
      }

      .nav-list a:hover,
      .nav-list a:focus {
        background-color: var(--color-background-alt);
      }

      .language-switcher {
        margin-top: var(--space-xl);
        padding-top: var(--space-lg);
        border-top: 1px solid #e0e0e0;
      }

      .language-switcher a {
        padding: var(--space-sm) var(--space-md);
        text-decoration: none;
      }

      .language-switcher a[aria-current="page"] {
        font-weight: 700;
        text-decoration: underline;
      }

      /* Desktop navigation - min-width progressive enhancement */
      @media (min-width: 768px) {
        .nav-toggle {
          display: none;
        }

        .main-nav {
          position: static;
          width: auto;
          max-width: none;
          transform: none;
          box-shadow: none;
          padding: 0;
          display: flex;
          align-items: center;
          gap: var(--space-lg);
        }

        .nav-list {
          display: flex;
          align-items: center;
          gap: var(--space-md);
        }

        .nav-list li {
          margin-bottom: 0;
        }

        .language-switcher {
          margin-top: 0;
          padding-top: 0;
          border-top: none;
          display: flex;
          align-items: center;
          gap: var(--space-sm);
        }
      }

      /* Footer styling */
      footer[role="contentinfo"] {
        margin-top: var(--space-2xl);
        padding: var(--space-xl) var(--space-md);
        background-color: var(--color-background-alt);
        border-top: 1px solid #e0e0e0;
      }

      .footer-container {
        max-width: var(--container-max-width);
        margin: 0 auto;
        text-align: center;
      }

      /* Main content spacing */
      main[role="main"] {
        min-height: 60vh;
      }
    </style>
  </body>
</html>
